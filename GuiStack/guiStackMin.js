function menuFunction() { var e = document.getElementById("myTopnav"); "topnav" === e.className ? e.className += " responsive" : e.className = "topnav" } function changeActive() { var e = document.getElementById(this); "active" === e.className ? e.className += "" : e.className = "active" } var game, levelScore = 0, oldLevelScore = 0, LEVEL = 1, gameOptions = { timeLimit: 60, gravity: 2e3, crateSpeed: 500, crateHorizontalRange: 540, fallingHeight: 650, localStorageName: "GuiStack_HighScore", gameWidth: 640, gameHeight: 960 }, GROUNDHEIGHT, CRATEHEIGHT; window.onload = function () { var e = window.innerWidth, t = window.innerHeight / e; t >= 1 && (t < 1.5 ? gameOptions.gameWidth = gameOptions.gameHeight / t : gameOptions.gameHeight = gameOptions.gameWidth * t), (game = new Phaser.Game(gameOptions.gameWidth, gameOptions.gameHeight, Phaser.CANVAS)).state.add("PlayGame", playGame), game.state.start("PlayGame") }; var playGame = function () { }; playGame.prototype = { preload: function () { game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL, game.scale.pageAlignHorizontally = !0, game.scale.pageAlignVertically = !0, game.stage.disableVisibilityChange = !0, game.load.image("ground", "assets/sprites/ground.png"), game.load.image("ground2", "assets/sprites/ground2.png"), game.load.image("sky", "assets/sprites/sky.png"), game.load.image("crate", "assets/sprites/crate.png"), game.load.image("title", "assets/sprites/title.png"), game.load.image("title2", "assets/sprites/title2.png"), game.load.image("tap", "assets/sprites/tap.png"), game.load.audio("hit01", ["assets/sounds/hit01.mp3", "assets/sounds/hit01.ogg"]), game.load.audio("hit02", ["assets/sounds/hit02.mp3", "assets/sounds/hit02.ogg"]), game.load.audio("hit03", ["assets/sounds/hit03.mp3", "assets/sounds/hit03.ogg"]), game.load.audio("remove", ["assets/sounds/remove.mp3", "assets/sounds/remove.ogg"]), game.load.audio("gameover", ["assets/sounds/gameover.mp3", "assets/sounds/gameover.ogg"]), game.load.bitmapFont("font", "assets/fonts/font.png", "assets/fonts/font.xml"), game.load.bitmapFont("smallfont", "assets/fonts/smallfont.png", "assets/fonts/smallfont.xml") }, create: function () { !Phaser.Device.desktop && gameOptions.gameHeight < 768 && (game.scale.forceOrientation(!1, !0), game.scale.enterIncorrectOrientation.add(function () { game.paused = !0, document.querySelector("canvas").style.display = "none", document.getElementById("wrongorientation").style.display = "block" }), game.scale.leaveIncorrectOrientation.add(function () { game.paused = !1, document.querySelector("canvas").style.display = "block", document.getElementById("wrongorientation").style.display = "none" })), this.lastSoundPlayed = Date.now(), this.savedData = null == localStorage.getItem(gameOptions.localStorageName) ? { score: 0 } : JSON.parse(localStorage.getItem(gameOptions.localStorageName)), this.hitSound = [game.add.audio("hit01"), game.add.audio("hit02"), game.add.audio("hit03")], this.gameOverSound = game.add.audio("gameover"), this.removeSound = game.add.audio("remove"), this.score = 0, LEVEL > 1 && (oldLevelScore = this.score, this.score = levelScore), GROUNDHEIGHT = game.cache.getImage("ground").height, CRATEHEIGHT = game.cache.getImage("crate").height, this.firstCrate = !0; var e = game.add.image(0, 0, "sky"); e.width = game.width, e.height = game.height, this.cameraGroup = game.add.group(), this.crateGroup = game.add.group(), this.cameraGroup.add(this.crateGroup), game.physics.startSystem(Phaser.Physics.BOX2D), game.physics.box2d.gravity.y = gameOptions.gravity, this.canDrop = !0; var t = Math.floor(9 * Math.random() + 2), a = (Math.floor(9 * Math.random()), game.add.sprite(game.width / 2, game.height, "ground")); a.y = game.height - a.height / 2, game.add.bitmapText(game.width - game.width / 4, 60, "font", "Score", 45), game.add.bitmapText(game.width - game.width / 4 + 45, 100, "font", "" + this.score, 40), game.add.bitmapText(10, 60, "font", "Level", 45), game.add.bitmapText(55, 100, "font", "" + LEVEL, 40); var i = game.add.sprite(game.width / t, game.height, "ground2"); i.y = game.height - game.height / 2.4; var s = game.add.sprite(game.width - game.width / t, game.height, "ground2"); s.y = game.height - game.height / 2.6, this.movingCrate = game.add.sprite((game.width - gameOptions.crateHorizontalRange) / 2, game.height - GROUNDHEIGHT - gameOptions.fallingHeight, "crate"), this.movingCrate.anchor.set(.5), this.cameraGroup.add(this.movingCrate); game.add.tween(this.movingCrate).to({ x: (game.width + gameOptions.crateHorizontalRange) / 2 }, gameOptions.crateSpeed, Phaser.Easing.Linear.None, !0, 0, -1, !0); game.physics.box2d.enable(a), a.body.friction = 1, a.body.static = !0, a.body.setCollisionCategory(1), this.cameraGroup.add(a), game.physics.box2d.enable(i), i.body.friction = 1, i.body.static = !0, i.body.setCollisionCategory(1), this.cameraGroup.add(i), game.physics.box2d.enable(s), s.body.friction = 1, s.body.static = !0, s.body.setCollisionCategory(1), this.cameraGroup.add(s), game.input.onDown.add(this.dropCrate, this), this.menuGroup = game.add.group(); var o = game.add.sprite(game.width / 2, game.height - 240, "tap"); if (o.anchor.set(.5), this.menuGroup.add(o), LEVEL <= 1) { var m = game.add.image(game.width / 2, o.y - 470, "title"); m.anchor.set(.5, 0), this.menuGroup.add(m) } else { var g = game.add.image(game.width / 2, o.y - 470, "title2"); g.anchor.set(.5, 0), this.menuGroup.add(g) } var r = game.add.bitmapText(game.width / 2, game.height - 74, "smallfont", "YOUR TOP SCORE", 24); r.anchor.set(.5), this.menuGroup.add(r); var n = game.add.bitmapText(game.width / 2, game.height - 20, "font", this.savedData.score.toString(), 72); n.anchor.set(.5), this.menuGroup.add(n); game.add.tween(o).to({ alpha: 0 }, 150, Phaser.Easing.Cubic.InOut, !0, 0, -1, !0) }, dropCrate: function () { if (this.firstCrate && (this.firstCrate = !1, this.menuGroup.destroy(), this.timer = 0, this.timerEvent = game.time.events.loop(Phaser.Timer.SECOND, this.tick, this), this.timeText = game.add.bitmapText(game.width - game.width / 2 - 60, 60, "font", gameOptions.timeLimit.toString(), 72)), this.canDrop && this.timer <= gameOptions.timeLimit) { this.canDrop = !1, this.movingCrate.alpha = 0; var e = game.add.sprite(this.movingCrate.x, this.movingCrate.y, "crate"); e.hit = !1, game.physics.box2d.enable(e), e.body.friction = 1, e.body.bullet = !0, this.crateGroup.add(e), e.body.setCollisionCategory(1), e.body.setCategoryContactCallback(1, function (e, t, a, i, s, o) { Date.now() - this.lastSoundPlayed > 200 && this.timer <= gameOptions.timeLimit && (this.lastSoundPlayed = Date.now(), Phaser.ArrayUtils.getRandomItem(this.hitSound).play()), e.sprite.hit || (e.sprite.hit = !0, e.bullet = !1, this.getMaxHeight()) }, this) } }, update: function () { this.crateGroup.forEach(function (e) { e.y > game.height + e.height && (e.hit || this.getMaxHeight(), e.destroy()) }, this) }, scaleCamera: function (e) { game.add.tween(this.cameraGroup).to({ x: (game.width - game.width * e) / 2, y: game.height - game.height * e }, 200, Phaser.Easing.Quadratic.IN, !0); game.add.tween(this.cameraGroup.scale).to({ x: e, y: e }, 200, Phaser.Easing.Quadratic.IN, !0).onComplete.add(function () { this.canDrop = !0, this.movingCrate.alpha = 1 }, this) }, getMaxHeight: function () { var e = 0; this.crateGroup.forEach(function (t) { if (t.hit) { var a = Math.round((game.height - GROUNDHEIGHT - t.y - CRATEHEIGHT / 2) / CRATEHEIGHT) + 1; e = Math.max(a, e) } }, this), this.movingCrate.y = game.height - GROUNDHEIGHT - e * CRATEHEIGHT - gameOptions.fallingHeight; var t = game.height + CRATEHEIGHT * e, a = game.height / t; this.scaleCamera(a) }, tick: function () { this.timer++ , this.timeText.text = (gameOptions.timeLimit - this.timer).toString(), this.timer > gameOptions.timeLimit && (game.time.events.remove(this.timerEvent), this.movingCrate.destroy(), this.timeText.destroy(), game.time.events.add(2 * Phaser.Timer.SECOND, function () { this.crateGroup.forEach(function (e) { e.body.static = !0 }, !0), this.removeEvent = game.time.events.loop(Phaser.Timer.SECOND / 10, this.removeCrate, this) }, this)) }, removeCrate: function () { if (this.crateGroup.children.length > 0) { var e = this.crateGroup.getChildAt(0), t = Math.round((game.height - GROUNDHEIGHT - e.y - CRATEHEIGHT / 2) / CRATEHEIGHT) + 1; this.score += t, this.removeSound.play(); var a = game.add.bitmapText(e.x, e.y, "smallfont", t.toString(), 36); a.anchor.set(.5), this.cameraGroup.add(a), e.destroy() } else if (game.time.events.remove(this.removeEvent), this.gameOverSound.play(), game.add.bitmapText(game.width / 2, game.height / 4, "font", "YOUR SCORE", 72).anchor.set(.5), game.add.bitmapText(game.width / 2, game.height / 4 + 120, "font", this.score.toString(), 144).anchor.set(.5), localStorage.setItem(gameOptions.localStorageName, JSON.stringify({ score: Math.max(this.score, this.savedData.score) })), this.score > 40 * LEVEL) (i = game.add.bitmapText(game.width / 2, game.height / 4 + 260, "smallfont", "Level Up", 48)).anchor.set(.5), LEVEL += 1, levelScore = this.score, game.time.events.add(5 * Phaser.Timer.SECOND, function () { game.state.start("PlayGame") }, this); else { var i = game.add.bitmapText(game.width / 2, game.height / 4 + 260, "smallfont", "Get " + 40 * LEVEL + " to Level Up", 48); i.anchor.set(.5), game.time.events.add(7 * Phaser.Timer.SECOND, function () { game.state.start("PlayGame") }, this) } } };